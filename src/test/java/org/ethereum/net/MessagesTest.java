package org.ethereum.net;

import static org.junit.Assert.*;

import java.net.UnknownHostException;
import java.util.List;

import org.ethereum.net.message.BlocksMessage;
import org.ethereum.net.message.DisconnectMessage;
import org.ethereum.net.message.GetChainMessage;
import org.ethereum.net.message.HelloMessage;
import org.ethereum.net.message.NotInChainMessage;
import org.ethereum.net.message.PeersMessage;
import org.ethereum.net.message.TransactionsMessage;
import org.ethereum.net.rlp.RLPList;
import org.ethereum.net.vo.Block;
import org.ethereum.net.vo.PeerData;
import org.ethereum.net.vo.Transaction;
import org.ethereum.util.Utils;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

public class MessagesTest {

    /* HELLO_MESSAGE */

    @Test /* HelloMessage 1 */
    public void test_1(){

        String helloMessageRaw = "F8 77 80 0C 80 AD 45 74 " +
                "68 65 72 65 75 6D 28 2B 2B 29 2F 5A 65 72 6F 47 " +
                "6F 78 2F 76 30 2E 35 2E 31 2F 6E 63 75 72 73 65 " +
                "73 2F 4C 69 6E 75 78 2F 67 2B 2B 07 82 76 5F B8 " +
                "40 D8 83 3B 83 56 0E 0B 12 17 0E 91 69 DC 43 78 " +
                "42 23 A5 98 42 DE 23 59 E6 D0 3D B3 4C 30 A9 66 " +
                "C2 DE 3B 4B 25 52 FB 0D 75 95 A1 85 D5 58 F2 E6 " +
                "69 B5 95 67 4F 52 17 C9 96 EE 14 88 84 82 8B E0 FD";
        byte[] payload = Hex.decode(helloMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        HelloMessage helloMessage = new HelloMessage(rlpList);
        helloMessage.parseRLP();
        System.out.println(helloMessage);


        assertEquals(12, helloMessage.getProtocolVersion());
        assertEquals(0, helloMessage.getNetworkId());
        assertEquals("Ethereum(++)/ZeroGox/v0.5.1/ncurses/Linux/g++", helloMessage.getClientId());
        assertEquals(7, helloMessage.getCapabilities());
        assertEquals(30303, helloMessage.getPeerPort());
        assertEquals(
            "D8833B83560E0B12170E9169DC43784223A59842DE2359E6D03DB34C30A966C2DE3B4B2552FB0D7595A185D558F2E669B595674F5217C996EE148884828BE0FD",
            Utils.toHexString(helloMessage.getPeerId()).toUpperCase() );
    }

    @Test /* HelloMessage 2 */
    public void test_2(){

        String helloMessageRaw = "F87F800B80B5457468657265756D282B2B292F76302E342E332F4554485F4255494C445F545950452F4554485F4255494C445F504C4154464F524D0782765FB840E02B18FBA6B887FB9258469C3AF8E445CC9AE2B5386CAC5F60C4170F822086224E3876555C745A7EC8AC181C7F9701776D94A779604EA12651DE5F4A748D29E1";
        byte[] payload = Hex.decode(helloMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        HelloMessage helloMessage = new HelloMessage(rlpList);
        helloMessage.parseRLP();
        System.out.println(helloMessage);

        assertEquals(11, helloMessage.getProtocolVersion());
        assertEquals(0, helloMessage.getNetworkId());
        assertEquals("Ethereum(++)/v0.4.3/ETH_BUILD_TYPE/ETH_BUILD_PLATFORM", helloMessage.getClientId());
        assertEquals(7, helloMessage.getCapabilities());
        assertEquals(30303, helloMessage.getPeerPort());
        assertEquals(
                "E02B18FBA6B887FB9258469C3AF8E445CC9AE2B5386CAC5F60C4170F822086224E3876555C745A7EC8AC181C7F9701776D94A779604EA12651DE5F4A748D29E1",
                Utils.toHexString(helloMessage.getPeerId()).toUpperCase() );
    }

    /* DISCONNECT_MESSAGE */

    @Test /* DisconnectMessage 1 */
    public void test_3(){

        String disconnectMessageRaw = "C20100";
        byte[] payload = Hex.decode(disconnectMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        DisconnectMessage disconnectMessage = new DisconnectMessage(rlpList);
        System.out.println(disconnectMessage);

        assertEquals(disconnectMessage.getReason(),
                DisconnectMessage.REASON_DISCONNECT_REQUESTED);
    }

    @Test /* DisconnectMessage 2 */
    public void test_4(){

        String disconnectMessageRaw = "C20101";
        byte[] payload = Hex.decode(disconnectMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        DisconnectMessage disconnectMessage = new DisconnectMessage(rlpList);
        System.out.println(disconnectMessage);

        assertEquals(disconnectMessage.getReason(),
                DisconnectMessage.REASON_TCP_ERROR);
    }

    /* PEERS */

    @Test /*  PeersMessage 1*/
    public void test_5(){

        String peersMessageRaw
        byte[] payload = Hex.decode(peersMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        PeersMessage peersMessage= new PeersMessage(rlpList);
        System.out.println(peersMessage);

        assertEquals(9, peersMessage.getPeers().size());

        PeerData peerData = peersMessage.getPeers().get(3);

        assertEquals("/85.65.126.45", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("82A8A5831D3B4FB76CF130CDC8A2B162A85D005D82A1DCC9B73239035EADE6347EDE2FFC86571ABE348EA38699CE886AA3D425FE58182C433434AB4CFD7B5B88",
                Utils.toHexString( peerData.getPeerId() ).toUpperCase());
    }

    @Test /*  PeersMessage 2 */
    public void test_6(){

        String peersMessageRaw
        byte[] payload = Hex.decode(peersMessageRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        PeersMessage peersMessage= new PeersMessage(rlpList);
        System.out.println(peersMessage);

        assertEquals(77, peersMessage.getPeers().size());

        PeerData peerData = peersMessage.getPeers().get(7);

        assertEquals("/191.234.57.55", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("21780C55B47DB4B11467B5F55B0B555E0887CE36FBD975E224B1C70EAC7AB8E8C2DB37F0A48B90FFDD5A379ADA99B6A0F6429C4A53C25558191A682636AEF4F2",
                Utils.toHexString( peerData.getPeerId() ).toUpperCase());

        peerData = peersMessage.getPeers().get(75);

        assertEquals("/86.124.82.254", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("F6155F1A60143B7D9D5D1A440D7D52FE6809F69E0C6F1E0024457E0D71DD88ADE3B13AAA940C89AC0610952B48BD832C42E343A13E61FFDB06010CFFC345E053",
                Utils.toHexString( peerData.getPeerId() ).toUpperCase());
    }

    @Test /* Peers msg parsing performance*/
    public void test_7() throws UnknownHostException {

        long time1 = System.currentTimeMillis();
        for (int i = 0; i < 20000; ++i){

            String peersPacketRaw

            byte[] payload = Hex.decode(peersPacketRaw);
            RLPList rlpList = new RLPList();
            RLP.parseObjects(payload, rlpList);

            PeersMessage peersMessage = new PeersMessage(rlpList);
            peersMessage.parseRLP();
        }
        long time2 = System.currentTimeMillis();

        System.out.println("20,000 PEERS packets parsing: " + (time2 - time1) + "(msec)");
    }

    /* TRANSACTIONS */
    
    @Test  /* Transactions message 1 */
    public void test_8(){

        String transactionsPacketRaw = "F86E12F86B04881BC16D674EC8000094CD2A3D9F938E13CD947EC05ABC7FE734DF8DD8268609184E72A00064801BA05E3868194605F1647593B842725818CCFA6A38651A728715133A8E97CDCFAC54A00FF91628D04B215EBCCFD5F4FC34CC1B45DF32F6B4609FBB0DE42E8522264467";

        byte[] payload = Hex.decode(transactionsPacketRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        TransactionsMessage transactionsMessage = new TransactionsMessage(rlpList);
        System.out.println(transactionsMessage);

        assertEquals(1, transactionsMessage.getTransactions().size());

        Transaction tx =
                transactionsMessage.getTransactions().get(0);

        assertEquals("558A3797E0DD3FBFAF761F1ADD6749C7D5DB313FDAC5CBA59F40E28AF7BBACD1",
                Utils.toHexString( tx.getHash() ).toUpperCase());

        assertEquals("04",
                Utils.toHexString( tx.getNonce() ).toUpperCase());

        assertEquals("1BC16D674EC80000",
                Utils.toHexString( tx.getValue() ).toUpperCase());

        assertEquals("CD2A3D9F938E13CD947EC05ABC7FE734DF8DD826",
                Utils.toHexString( tx.getReceiveAddress() ).toUpperCase());

        assertEquals("09184E72A000",
                Utils.toHexString( tx.getGasPrice() ).toUpperCase());

        assertEquals("64",
                Utils.toHexString( tx.getGas() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getData() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getInit() ).toUpperCase());

        assertEquals("1B",
                Utils.toHexString( new byte[] {tx.getSignatureV()} ).toUpperCase());

        assertEquals("5E3868194605F1647593B842725818CCFA6A38651A728715133A8E97CDCFAC54",
                Utils.toHexString( tx.getSignatureR() ).toUpperCase());

        assertEquals("0FF91628D04B215EBCCFD5F4FC34CC1B45DF32F6B4609FBB0DE42E8522264467",
                Utils.toHexString( tx.getSignatureS() ).toUpperCase());
    }

    @Test  /* Transactions message 2 */
    public void test_9(){

        String transactionsPacketRaw

        byte[] payload = Hex.decode(transactionsPacketRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        TransactionsMessage transactionsMessage = new TransactionsMessage(rlpList);
        System.out.println(transactionsMessage);

        assertEquals(3, transactionsMessage.getTransactions().size());

        Transaction tx =
                transactionsMessage.getTransactions().get(0);

        assertEquals("4B7D9670A92BF120D5B43400543B69304A14D767CF836A7F6ABFF4EDDE092895",
                Utils.toHexString( tx.getHash() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getNonce() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getValue() ).toUpperCase());

        assertEquals("0000000000000000000000000000000000000000",
                Utils.toHexString( tx.getReceiveAddress() ).toUpperCase());

        assertEquals("09184E72A000",
                Utils.toHexString( tx.getGasPrice() ).toUpperCase());

        assertEquals("2710",
                Utils.toHexString( tx.getGas() ).toUpperCase());

        assertEquals("606956330C0D630000003359366000530A0D630000003359602060005301356000533557604060005301600054630000000C58",
                Utils.toHexString( tx.getData() ).toUpperCase());

        assertEquals("33606957",
                Utils.toHexString( tx.getInit() ).toUpperCase());

        assertEquals("1C",
                Utils.toHexString( new byte[] {tx.getSignatureV()} ).toUpperCase());

        assertEquals("7F6EB94576346488C6253197BDE6A7E59DDC36F2773672C849402AA9C402C3C4",
                Utils.toHexString( tx.getSignatureR() ).toUpperCase());

        assertEquals("6D254E662BF7450DD8D835160CBB053463FED0B53F2CDD7F3EA8731919C8E8CC",
                Utils.toHexString( tx.getSignatureS() ).toUpperCase());

        tx = transactionsMessage.getTransactions().get(2);

        assertEquals("B0251A1BB20B44459DB5B5444AB53EDD9E12C46D0BA07FA401A797BEB967D53C",
                Utils.toHexString( tx.getHash() ).toUpperCase());

        assertEquals("02",
                Utils.toHexString( tx.getNonce() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getValue() ).toUpperCase());

        assertEquals("CCDEAC59D35627B7DE09332E819D5159E7BB7250",
                Utils.toHexString( tx.getReceiveAddress() ).toUpperCase());

        assertEquals("09184E72A000",
                Utils.toHexString( tx.getGasPrice() ).toUpperCase());

        assertEquals("2710",
                Utils.toHexString( tx.getGas() ).toUpperCase());

        assertEquals("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002D0ACEEE7E5AB874E22CCF8D1A649F59106D74E8",
                Utils.toHexString( tx.getData() ).toUpperCase());

        assertEquals("NULL",
                Utils.toHexString( tx.getInit() ).toUpperCase());

        assertEquals("1B",
                Utils.toHexString( new byte[] {tx.getSignatureV()} ).toUpperCase());

        assertEquals("D05887574456C6DE8F7A0D172342C2CBDD4CF7AFE15D9DBB8B75B748BA6791C9",
                Utils.toHexString( tx.getSignatureR() ).toUpperCase());

        assertEquals("1E87172A861F6C37B5A9E3A5D0D7393152A7FBE41530E5BB8AC8F35433E5931B",
                Utils.toHexString(tx.getSignatureS()).toUpperCase());
    }

    /* BLOCKS */

    @Test /* BlocksMessage parsing 1*/
    public void test_10(){

//        BlockData [ hash=36a24b56c6104e5a5c0e70b0553f1a4d6109d065d718d7443a6a475ec8c83905  parentHash=372d8e5c6e32335fb86fa7a6ae1b35165745346e1c786eacd42df85f8da12b3d, unclesHash=1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347, coinbase=1a4d98707ba8dd3d36d16e8c165c272645695cea, stateHash=5e2d2cc0b42b38b5b18c9d65734f9877c035dd390b9c12c48624f2243668a268, txListHash=1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347, difficulty=02471a26, timestamp=1398260220, extraData=null, nonce=0000000000000000000000000000000000000000000000006f4cd02da011a235]
        String blocksRaw = "F8CC13F8C9F8C5A0372D8E5C6E32335FB86FA7A6AE1B35165745346E1C786EACD42DF85F8DA12B3DA01DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347941A4D98707BA8DD3D36D16E8C165C272645695CEAA05E2D2CC0B42B38B5B18C9D65734F9877C035DD390B9C12C48624F2243668A268A01DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D493478402471A26845357C1FC80A00000000000000000000000000000000000000000000000006F4CD02DA011A235C0C0";

        byte[] payload = Hex.decode(blocksRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        BlocksMessage blocksMessage = new BlocksMessage(rlpList);
        List<Block> list = blocksMessage.getBlockDataList();
        System.out.println(blocksMessage);

        assertEquals(1, list.size());

        Block block = list.get(0);

        assertEquals("36A24B56C6104E5A5C0E70B0553F1A4D6109D065D718D7443A6A475EC8C83905",
                Utils.toHexString(block.getHash()).toUpperCase());

        assertEquals("372D8E5C6E32335FB86FA7A6AE1B35165745346E1C786EACD42DF85F8DA12B3D",
                Utils.toHexString(block.getParentHash()).toUpperCase());

        assertEquals("1DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347",
                Utils.toHexString(block.getUnclesHash()).toUpperCase());

        assertEquals("1A4D98707BA8DD3D36D16E8C165C272645695CEA",
                Utils.toHexString(block.getCoinbase()).toUpperCase());

        assertEquals("5E2D2CC0B42B38B5B18C9D65734F9877C035DD390B9C12C48624F2243668A268",
                Utils.toHexString(block.getStateHash()).toUpperCase());

        assertEquals("1DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347",
                Utils.toHexString(block.getTxListHash()).toUpperCase());

        assertEquals("02471A26", Utils.toHexString(block.getDifficulty()).toUpperCase());
        assertEquals(1398260220, block.getTimestamp());

        assertNull(block.getExtraData());

        assertEquals("0000000000000000000000000000000000000000000000006F4CD02DA011A235",
                Utils.toHexString(block.getNonce()).toUpperCase());
    }

    @Test /* BlocksMessage really big message parsing */
    public void test11(){

        String blocksRaw = "";

        byte[] payload = Hex.decode(blocksRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        BlocksMessage blocksMessage = new BlocksMessage(rlpList);
        List<Block> list = blocksMessage.getBlockDataList();
        System.out.println(blocksMessage);


        assertEquals(32, list.size());

        Block block = list.get(31);

        assertEquals("518916DFB79C390BD7BFF75712174512C2F96BEC42A3F573355507AD1588CE0C",
                Utils.toHexString(block.getHash()).toUpperCase());

        assertEquals("AB6B9A5613970FAA771B12D449B2E9BB925AB7A369F0A4B86B286E9D540099CF",
                Utils.toHexString(block.getParentHash()).toUpperCase());

        assertEquals("1DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347",
                Utils.toHexString(block.getUnclesHash()).toUpperCase());

        assertEquals("3854AAF203BA5F8D49B1EC221329C7AEBCF050D3",
                Utils.toHexString(block.getCoinbase()).toUpperCase());

        assertEquals("990DC3B5ACBEE04124361D958FE51ACB582593613FC290683940A0769549D3ED",
                Utils.toHexString(block.getStateHash()).toUpperCase());

        assertEquals("9BFE4817D274EA3EB8672E9FE848C3885B53BBBD1D7C26E6039F90FB96B942B0",
                Utils.toHexString(block.getTxListHash()).toUpperCase());

        assertEquals("3FF000", Utils.toHexString(block.getDifficulty()).toUpperCase());
        assertEquals(1396643511, block.getTimestamp());

        assertNull(block.getExtraData());

        assertEquals("00000000000000000000000000000000000000000000000077377ADFF6C227DB",
                Utils.toHexString(block.getNonce()).toUpperCase());

        System.out.println(blocksMessage);
    }

    /* GET_CHAIN */

    @Test /* GET_CHAIN message parsing*/
    public void test_12(){

        String getChainRaw = "F9042414A09F7A910147A6C99AB7EEEAC1ADC7B1B9B0D7D9DD83FD7FC125561016F19B624DA024B519ED5F71207330C1F450B7A4C7445C589B5F9AE73E9BBA09E0A8CB15D845A01EF7B03C7E58E65068D71F68E168C0CC0438808C32FB3E46E402D078B2020E0DA06A0F152620F606E134679D22A86156F9DDEB56FACD62C3106CC66AE030234483A001A3E918F9C2F74BD144505CF70650EF30BE806C533BA5AE3C983F55615EE98EA0E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138A0C55035BC5BDA25A8C6A2EFF4CCF5386CFFF3E7EE1DC9168B00AABF1074FEB1E2A060AC4D0C12C4CBF552440E659FE4E54C38EF7D05EF98965BA0E0248379CB78DFA0E1620BF60A735DDEA7CB434143E7EF663D043420F017360289FF78046948A77AA0DA8BC25F6571AB0EDE9C3DEF34FFF996575ADFCC1F8009A0388CE0A63AD9FC57A0E153CD998421E4F6BAC6A8329AE90BDA70D5D0F46A7EC02B88BDF5D3CAA8384FA0D3F00977D766A5CAF8F07EF8D15B1DADBBFD57B60BBE6CA54B2F9C2446F614EFA08687EC7AE1A541B13CDA57DCF387DEA3EA35A35AC3D5A9381376EAFBC7BA2CF5A08814AC8660E776A3FCA432D2E9A3533AFFEAEC783ECBB5DAD495B44E04EF1F98A07F2E67F508830BF18E8A432BAB9B957FA2BCDE57BE6C766C13871F833C27B9A5A021EE1E6602530EF711F6C8022799108E1AFB546E7B5FF3E3CBB4DA66C054868DA02940A17DD5C1D1911FFDA7DFAE3E5FAF8E1808CBD11F3248C18B8777B4A5D256A07E5D2F25D9750665ADBFF9C36820AD67CC55850D7D798DAB512343AB0C4E58B3A06674BD13B1051852413031BAA885448E50917D7F1D5EFB7DBA397ED4E5C36D72A06AA7A7D18B07BE0222DA47A8EE6923BAD522DBF5D0650D64CA0F2AD4C606D0CCA07F877735FCC29F804926AACEDBF7AD4896E330DCCE57F257A7D5C81F5CC03188A0FF6B7749526281A5E6A845B8ACC7DC03D2CAAEAFF0CEBF78659FDE1007AD9C05A054D6375CF54B0246FB45787206BA70115DED577354942A9219BC9E761A7E0CBCA0809384946576FB15A8F827B30045D18203A90BE662863D5F205B868DF882472AA05A6EA58D02A2823BA693AC11C21D3C4D66AFFFDB9F1475EA86A461912C2F3187A003AF21F3939C29C231200B1F790F16421A8923254CBF2A90455B9B8F28BE4562A036FDFB3E05936CAA1ABBDCFBBACD9000F86FBCAE2228E77346533CEF17073767A0D3CE8B71E129020F3356A09946F9BC4C18E61D9516E74F6F912461A438F1E006A01D8203A8E23F50D70188ED3099E50645B92959C2216EA7A74719C159B4978BDBA03812A8FC4A5BB6EF0832EBF5058FAF65A46187CEE568C94915AE1850069775F3A0687DDEF8750F606637B3F5F23D286053671081A1AD224B35A624DE7392193951A0E6A8E1D4417292E20F9698A3464CEEABC6476A57521FF79D994DE22C55DADEAD820100";

        byte[] payload = Hex.decode(getChainRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        GetChainMessage getChainMessage = new GetChainMessage(rlpList);
        getChainMessage.parseRLP();
        System.out.println(getChainMessage);

        assertEquals(32, getChainMessage.getBlockHashList().size());

        assertEquals("E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138",
                Utils.toHexString( getChainMessage.getBlockHashList().get(5) ).toUpperCase());

        assertEquals("6AA7A7D18B07BE0222DA47A8EE6923BAD522DBF5D0650D64CA0F2AD4C606D0CC",
                Utils.toHexString( getChainMessage.getBlockHashList().get(19) ).toUpperCase());

        assertEquals("03AF21F3939C29C231200B1F790F16421A8923254CBF2A90455B9B8F28BE4562",
                Utils.toHexString( getChainMessage.getBlockHashList().get(25) ).toUpperCase());
    }

    /* NOT_IN_CHAIN */

    @Test /* NotInChainMessage parsing 1 */
    public void test_13(){

        String getChainRaw = "E015A0E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138";

        byte[] payload = Hex.decode(getChainRaw);
        RLPList rlpList = new RLPList();
        RLP.parseObjects(payload, rlpList);

        NotInChainMessage notInChainMessage = new NotInChainMessage(rlpList);
        System.out.println(notInChainMessage);

        assertEquals("E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138",
                Utils.toHexString(notInChainMessage.getHash()).toUpperCase());
    }
}

