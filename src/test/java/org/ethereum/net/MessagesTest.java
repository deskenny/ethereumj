package org.ethereum.net;

import static org.junit.Assert.*;

import java.math.BigInteger;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import org.ethereum.core.Block;
import org.ethereum.core.Transaction;
import org.ethereum.crypto.ECKey;
import org.ethereum.crypto.HashUtil;
import org.ethereum.net.client.PeerData;
import org.ethereum.net.message.BlocksMessage;
import org.ethereum.net.message.DisconnectMessage;
import org.ethereum.net.message.GetChainMessage;
import org.ethereum.net.message.HelloMessage;
import org.ethereum.net.message.NotInChainMessage;
import org.ethereum.net.message.PeersMessage;
import org.ethereum.net.message.ReasonCode;
import org.ethereum.net.message.TransactionsMessage;
import org.ethereum.util.ByteUtil;
import org.ethereum.util.RLP;
import org.ethereum.util.RLPList;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

public class MessagesTest {

    /* HELLO_MESSAGE */

    @Test /* HelloMessage 1 */
    public void test_1(){

        String helloMessageRaw = "F8 77 80 0C 80 AD 45 74 " +
                "68 65 72 65 75 6D 28 2B 2B 29 2F 5A 65 72 6F 47 " +
                "6F 78 2F 76 30 2E 35 2E 31 2F 6E 63 75 72 73 65 " +
                "73 2F 4C 69 6E 75 78 2F 67 2B 2B 07 82 76 5F B8 " +
                "40 D8 83 3B 83 56 0E 0B 12 17 0E 91 69 DC 43 78 " +
                "42 23 A5 98 42 DE 23 59 E6 D0 3D B3 4C 30 A9 66 " +
                "C2 DE 3B 4B 25 52 FB 0D 75 95 A1 85 D5 58 F2 E6 " +
                "69 B5 95 67 4F 52 17 C9 96 EE 14 88 84 82 8B E0 FD";
        byte[] payload = Hex.decode(helloMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        HelloMessage helloMessage = new HelloMessage(rlpList);
        helloMessage.parseRLP();
        System.out.println(helloMessage);

        assertEquals(12, helloMessage.getProtocolVersion());
        assertEquals(0, helloMessage.getNetworkId());
        assertEquals("Ethereum(++)/ZeroGox/v0.5.1/ncurses/Linux/g++", helloMessage.getClientId());
        assertEquals(7, helloMessage.getCapabilities());
        assertEquals(30303, helloMessage.getPeerPort());
        assertEquals(
            "D8833B83560E0B12170E9169DC43784223A59842DE2359E6D03DB34C30A966C2DE3B4B2552FB0D7595A185D558F2E669B595674F5217C996EE148884828BE0FD",
            Hex.toHexString(helloMessage.getPeerId()).toUpperCase() );
    }

    @Test /* HelloMessage 2 */
	public void test_2() {

        String helloMessageRaw = "F87F800B80B5457468657265756D282B2B292F76302E342E332F4554485F4255494C445F545950452F4554485F4255494C445F504C4154464F524D0782765FB840E02B18FBA6B887FB9258469C3AF8E445CC9AE2B5386CAC5F60C4170F822086224E3876555C745A7EC8AC181C7F9701776D94A779604EA12651DE5F4A748D29E1";
        byte[] payload = Hex.decode(helloMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        HelloMessage helloMessage = new HelloMessage(rlpList);
        helloMessage.parseRLP();
        System.out.println(helloMessage);

        assertEquals(11, helloMessage.getProtocolVersion());
        assertEquals(0, helloMessage.getNetworkId());
        assertEquals("Ethereum(++)/v0.4.3/ETH_BUILD_TYPE/ETH_BUILD_PLATFORM", helloMessage.getClientId());
        assertEquals(7, helloMessage.getCapabilities());
        assertEquals(30303, helloMessage.getPeerPort());
        assertEquals(
                "E02B18FBA6B887FB9258469C3AF8E445CC9AE2B5386CAC5F60C4170F822086224E3876555C745A7EC8AC181C7F9701776D94A779604EA12651DE5F4A748D29E1",
                Hex.toHexString(helloMessage.getPeerId()).toUpperCase() );
    }

    /* DISCONNECT_MESSAGE */

    @Test /* DisconnectMessage 1 */
    public void test_3(){

        String disconnectMessageRaw = "C20100";
        byte[] payload = Hex.decode(disconnectMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        DisconnectMessage disconnectMessage = new DisconnectMessage(rlpList);
        System.out.println(disconnectMessage);

        assertEquals(disconnectMessage.getReason(), ReasonCode.DISCONNECT_REQUESTED);
    }

    @Test /* DisconnectMessage 2 */
    public void test_4(){

        String disconnectMessageRaw = "C20101";
        byte[] payload = Hex.decode(disconnectMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        DisconnectMessage disconnectMessage = new DisconnectMessage(rlpList);
        System.out.println(disconnectMessage);

        assertEquals(disconnectMessage.getReason(), ReasonCode.TCP_ERROR);
    }

    /* PEERS */

    @Test /*  PeersMessage 1*/
    public void test_5(){

        String peersMessageRaw
        byte[] payload = Hex.decode(peersMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        PeersMessage peersMessage= new PeersMessage(rlpList);
        System.out.println(peersMessage);

        assertEquals(9, peersMessage.getPeers().size());

        PeerData peerData = peersMessage.getPeers().get(3);

        assertEquals("/85.65.126.45", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("82A8A5831D3B4FB76CF130CDC8A2B162A85D005D82A1DCC9B73239035EADE6347EDE2FFC86571ABE348EA38699CE886AA3D425FE58182C433434AB4CFD7B5B88",
        		Hex.toHexString( peerData.getPeerId() ).toUpperCase());
    }

    @Test /*  PeersMessage 2 */
    public void test_6(){

        String peersMessageRaw
        byte[] payload = Hex.decode(peersMessageRaw);
        RLPList rlpList = RLP.decode2(payload);

        PeersMessage peersMessage= new PeersMessage(rlpList);
        System.out.println(peersMessage);

        assertEquals(77, peersMessage.getPeers().size());

        PeerData peerData = peersMessage.getPeers().get(7);

        assertEquals("/191.234.57.55", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("21780C55B47DB4B11467B5F55B0B555E0887CE36FBD975E224B1C70EAC7AB8E8C2DB37F0A48B90FFDD5A379ADA99B6A0F6429C4A53C25558191A682636AEF4F2",
        		Hex.toHexString( peerData.getPeerId() ).toUpperCase());

        peerData = peersMessage.getPeers().get(75);

        assertEquals("/86.124.82.254", peerData.getInetAddress().toString());
        assertEquals(30303, peerData.getPort());
        assertEquals("F6155F1A60143B7D9D5D1A440D7D52FE6809F69E0C6F1E0024457E0D71DD88ADE3B13AAA940C89AC0610952B48BD832C42E343A13E61FFDB06010CFFC345E053",
        		Hex.toHexString( peerData.getPeerId() ).toUpperCase());
    }

    @Test /* Peers msg parsing performance*/
    public void test_7() throws UnknownHostException {

        long time1 = System.currentTimeMillis();
        for (int i = 0; i < 20000; ++i){

            String peersPacketRaw

            byte[] payload = Hex.decode(peersPacketRaw);
            RLPList rlpList = RLP.decode2(payload);

            PeersMessage peersMessage = new PeersMessage(rlpList);
            peersMessage.parseRLP();
        }
        long time2 = System.currentTimeMillis();

        System.out.println("20,000 PEERS packets parsing: " + (time2 - time1) + "(msec)");
    }

    /* TRANSACTIONS */
    
    @Test  /* Transactions message 1 */
    public void test_8() {

        String txsPacketRaw = "f86e12f86b04648609184e72a00094cd2a3d9f938e13cd947ec05abc7fe734df8dd826"
        		+ "881bc16d674ec80000801ba05c89ebf2b77eeab88251e553f6f9d53badc1d800"
        		+ "bbac02d830801c2aa94a4c9fa00b7907532b1f29c79942b75fff98822293bf5f"
        		+ "daa3653a8d9f424c6a3265f06c";
        
        byte[] payload = Hex.decode(txsPacketRaw);
        RLPList rlpList = RLP.decode2(payload);

        TransactionsMessage transactionsMessage = new TransactionsMessage(rlpList);
        System.out.println(transactionsMessage);

        assertEquals(1, transactionsMessage.getTransactions().size());

		Transaction tx = transactionsMessage.getTransactions().get(0);

		assertEquals("5d2aee0490a9228024158433d650335116b4af5a30b8abb10e9b7f9f7e090fd8", Hex.toHexString(tx.getHash()));
		assertEquals("04", Hex.toHexString(tx.getNonce()));
		assertEquals("1bc16d674ec80000", Hex.toHexString(tx.getValue()));
		assertEquals("cd2a3d9f938e13cd947ec05abc7fe734df8dd826", Hex.toHexString(tx.getReceiveAddress()));
		assertEquals("64", Hex.toHexString(tx.getGasPrice()));
		assertEquals("09184e72a000", Hex.toHexString(tx.getGasLimit()));
		assertEquals("null", ByteUtil.toHexString(tx.getData()));

		assertEquals("1b", Hex.toHexString(new byte[] { tx.getSignature().v }));
		assertEquals("5c89ebf2b77eeab88251e553f6f9d53badc1d800bbac02d830801c2aa94a4c9f", Hex.toHexString(tx.getSignature().r.toByteArray()));
		assertEquals("0b7907532b1f29c79942b75fff98822293bf5fdaa3653a8d9f424c6a3265f06c", Hex.toHexString(tx.getSignature().s.toByteArray()));
    }
    
    @Test  /* Transactions message 2 */
    public void test_9(){

        String txsPacketRaw = "f9025012f89d8080940000000000000000000000000000000000000000860918"
                            + "4e72a000822710b3606956330c0d630000003359366000530a0d630000003359"
                            + "602060005301356000533557604060005301600054630000000c588433606957"
                            + "1ca07f6eb94576346488c6253197bde6a7e59ddc36f2773672c849402aa9c402"
                            + "c3c4a06d254e662bf7450dd8d835160cbb053463fed0b53f2cdd7f3ea8731919"
                            + "c8e8ccf901050180940000000000000000000000000000000000000000860918"
                            + "4e72a000822710b85336630000002e59606956330c0d63000000155933ff3356"
                            + "0d63000000275960003356576000335700630000005358600035560d63000000"
                            + "3a590033560d63000000485960003356573360003557600035335700b84a7f4e"
                            + "616d655265670000000000000000000000000000000000000000000000000030"
                            + "57307f4e616d6552656700000000000000000000000000000000000000000000"
                            + "00000057336069571ba04af15a0ec494aeac5b243c8a2690833faa74c0f73db1"
                            + "f439d521c49c381513e9a05802e64939be5a1f9d4d614038fbd5479538c48795"
                            + "614ef9c551477ecbdb49d2f8a6028094ccdeac59d35627b7de09332e819d5159"
                            + "e7bb72508609184e72a000822710b84000000000000000000000000000000000"
                            + "000000000000000000000000000000000000000000000000000000002d0aceee"
                            + "7e5ab874e22ccf8d1a649f59106d74e81ba0d05887574456c6de8f7a0d172342"
                            + "c2cbdd4cf7afe15d9dbb8b75b748ba6791c9a01e87172a861f6c37b5a9e3a5d0"
                            + "d7393152a7fbe41530e5bb8ac8f35433e5931b";

        byte[] payload = Hex.decode(txsPacketRaw);
        RLPList rlpList = RLP.decode2(payload);

        TransactionsMessage transactionsMessage = new TransactionsMessage(rlpList);
        System.out.println(transactionsMessage);

        assertEquals(3, transactionsMessage.getTransactions().size());

        Transaction tx =
                transactionsMessage.getTransactions().get(0);

        assertEquals("4b7d9670a92bf120d5b43400543b69304a14d767cf836a7f6abff4edde092895",
        		Hex.toHexString( tx.getHash() ));

        assertEquals("null",
        		Hex.toHexString( tx.getNonce() ));

        assertEquals("NULL",
        		Hex.toHexString( tx.getValue() ));

        assertEquals("0000000000000000000000000000000000000000",
        		Hex.toHexString( tx.getReceiveAddress() ));

        assertEquals("09184e72a000",
        		Hex.toHexString( tx.getGasPrice() ));

        assertEquals("2710",
        		Hex.toHexString( tx.getGasLimit() ));

        assertEquals("606956330c0d630000003359366000530a0d630000003359602060005301356000533557604060005301600054630000000c58",
        		Hex.toHexString( tx.getData() ));

        assertEquals("1c",
        		Hex.toHexString( new byte[] {tx.getSignature().v} ));

        assertEquals("7f6eb94576346488c6253197bde6a7e59ddc36f2773672c849402aa9c402c3c4",
        		Hex.toHexString( tx.getSignature().r.toByteArray() ));

        assertEquals("6d254e662bf7450dd8d835160cbb053463fed0b53f2cdd7f3ea8731919c8e8cc",
        		Hex.toHexString( tx.getSignature().s.toByteArray() ));

        tx = transactionsMessage.getTransactions().get(2);

        assertEquals("b0251a1bb20b44459db5b5444ab53edd9e12c46d0ba07fa401a797beb967d53c",
        		Hex.toHexString( tx.getHash() ));

        assertEquals("02",
        		Hex.toHexString( tx.getNonce() ));

        assertEquals("null",
        		Hex.toHexString( tx.getValue() ));

        assertEquals("ccdeac59d35627b7de09332e819d5159e7bb7250",
        		Hex.toHexString( tx.getReceiveAddress() ));

        assertEquals("09184e72a000",
        		Hex.toHexString( tx.getGasPrice() ));

        assertEquals("2710",
        		Hex.toHexString( tx.getGasLimit() ));

        assertEquals("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d0aceee7e5ab874e22ccf8d1a649f59106d74e8",
        		Hex.toHexString( tx.getData() ));

        assertEquals("1b",
        		Hex.toHexString( new byte[] {tx.getSignature().v} ));

        assertEquals("d05887574456c6de8f7a0d172342c2cbdd4cf7afe15d9dbb8b75b748ba6791c9",
        		Hex.toHexString( tx.getSignature().r.toByteArray() ));

        assertEquals("1e87172a861f6c37b5a9e3a5d0d7393152a7fbe41530e5bb8ac8f35433e5931b",
                Hex.toHexString(tx.getSignature().s.toByteArray()));
    }

    /* BLOCKS */

    @Test /* BlocksMessage really big message parsing */
    public void test11(){

        String blocksRaw = "";

        byte[] payload = Hex.decode(blocksRaw);
        RLPList rlpList = RLP.decode2(payload);

        BlocksMessage blocksMessage = new BlocksMessage(rlpList);
        List<Block> list = blocksMessage.getBlockDataList();
        System.out.println(blocksMessage);

        assertEquals(32, list.size());

        Block block = list.get(31);

        assertEquals("57A2795196F8007A34551BF356037C09C2E96B49E9611F5E308A1C9EE46147B2",
        		Hex.toHexString(block.getHash()).toUpperCase());

        assertEquals("D076D1EC43FD2E345D7B31C59D37208F0D5E93B5FC28929BE16246E63A6933EE",
        		Hex.toHexString(block.getParentHash()).toUpperCase());

        assertEquals("1DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D49347",
        		Hex.toHexString(block.getUnclesHash()).toUpperCase());

        assertEquals("E559DE5527492BCB42EC68D07DF0742A98EC3F1E",
        		Hex.toHexString(block.getCoinbase()).toUpperCase());

        assertEquals("01C1634EB128E49ECE80896DFBDC643303AA1878FD62062AC56431E5760F3949",
        		Hex.toHexString(block.getStateRoot()).toUpperCase());

        assertEquals("56022D", Hex.toHexString(block.getDifficulty()).toUpperCase());
        assertEquals(1402523821, block.getTimestamp());

        assertNull(block.getExtraData());

        assertEquals("3BD88E5D095D1F9AA8D11A7E9503768C13EC7D82FB23A11C8F03DB5EB3B16424",
        		Hex.toHexString(block.getNonce()).toUpperCase());

        System.out.println(blocksMessage);
    }

    /* GET_CHAIN */

    @Test /* GET_CHAIN message parsing*/
    public void test_12(){

        String getChainRaw = "F9042414A09F7A910147A6C99AB7EEEAC1ADC7B1B9B0D7D9DD83FD7FC125561016F19B624DA024B519ED5F71207330C1F450B7A4C7445C589B5F9AE73E9BBA09E0A8CB15D845A01EF7B03C7E58E65068D71F68E168C0CC0438808C32FB3E46E402D078B2020E0DA06A0F152620F606E134679D22A86156F9DDEB56FACD62C3106CC66AE030234483A001A3E918F9C2F74BD144505CF70650EF30BE806C533BA5AE3C983F55615EE98EA0E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138A0C55035BC5BDA25A8C6A2EFF4CCF5386CFFF3E7EE1DC9168B00AABF1074FEB1E2A060AC4D0C12C4CBF552440E659FE4E54C38EF7D05EF98965BA0E0248379CB78DFA0E1620BF60A735DDEA7CB434143E7EF663D043420F017360289FF78046948A77AA0DA8BC25F6571AB0EDE9C3DEF34FFF996575ADFCC1F8009A0388CE0A63AD9FC57A0E153CD998421E4F6BAC6A8329AE90BDA70D5D0F46A7EC02B88BDF5D3CAA8384FA0D3F00977D766A5CAF8F07EF8D15B1DADBBFD57B60BBE6CA54B2F9C2446F614EFA08687EC7AE1A541B13CDA57DCF387DEA3EA35A35AC3D5A9381376EAFBC7BA2CF5A08814AC8660E776A3FCA432D2E9A3533AFFEAEC783ECBB5DAD495B44E04EF1F98A07F2E67F508830BF18E8A432BAB9B957FA2BCDE57BE6C766C13871F833C27B9A5A021EE1E6602530EF711F6C8022799108E1AFB546E7B5FF3E3CBB4DA66C054868DA02940A17DD5C1D1911FFDA7DFAE3E5FAF8E1808CBD11F3248C18B8777B4A5D256A07E5D2F25D9750665ADBFF9C36820AD67CC55850D7D798DAB512343AB0C4E58B3A06674BD13B1051852413031BAA885448E50917D7F1D5EFB7DBA397ED4E5C36D72A06AA7A7D18B07BE0222DA47A8EE6923BAD522DBF5D0650D64CA0F2AD4C606D0CCA07F877735FCC29F804926AACEDBF7AD4896E330DCCE57F257A7D5C81F5CC03188A0FF6B7749526281A5E6A845B8ACC7DC03D2CAAEAFF0CEBF78659FDE1007AD9C05A054D6375CF54B0246FB45787206BA70115DED577354942A9219BC9E761A7E0CBCA0809384946576FB15A8F827B30045D18203A90BE662863D5F205B868DF882472AA05A6EA58D02A2823BA693AC11C21D3C4D66AFFFDB9F1475EA86A461912C2F3187A003AF21F3939C29C231200B1F790F16421A8923254CBF2A90455B9B8F28BE4562A036FDFB3E05936CAA1ABBDCFBBACD9000F86FBCAE2228E77346533CEF17073767A0D3CE8B71E129020F3356A09946F9BC4C18E61D9516E74F6F912461A438F1E006A01D8203A8E23F50D70188ED3099E50645B92959C2216EA7A74719C159B4978BDBA03812A8FC4A5BB6EF0832EBF5058FAF65A46187CEE568C94915AE1850069775F3A0687DDEF8750F606637B3F5F23D286053671081A1AD224B35A624DE7392193951A0E6A8E1D4417292E20F9698A3464CEEABC6476A57521FF79D994DE22C55DADEAD820100";

        byte[] payload = Hex.decode(getChainRaw);
        RLPList rlpList = RLP.decode2(payload);

        GetChainMessage getChainMessage = new GetChainMessage(rlpList);
        getChainMessage.parseRLP();
        System.out.println(getChainMessage);

        assertEquals(32, getChainMessage.getBlockHashList().size());

        assertEquals("E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138",
        		Hex.toHexString( getChainMessage.getBlockHashList().get(5) ).toUpperCase());

        assertEquals("6AA7A7D18B07BE0222DA47A8EE6923BAD522DBF5D0650D64CA0F2AD4C606D0CC",
        		Hex.toHexString( getChainMessage.getBlockHashList().get(19) ).toUpperCase());

        assertEquals("03AF21F3939C29C231200B1F790F16421A8923254CBF2A90455B9B8F28BE4562",
        		Hex.toHexString( getChainMessage.getBlockHashList().get(25) ).toUpperCase());
    }

    /* NOT_IN_CHAIN */

    @Test /* NotInChainMessage parsing 1 */
    public void test_13(){

        String getChainRaw = "E015A0E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138";

        byte[] payload = Hex.decode(getChainRaw);
        RLPList rlpList = RLP.decode2(payload);

        NotInChainMessage notInChainMessage = new NotInChainMessage(rlpList);
        System.out.println(notInChainMessage);

        assertEquals("E5E441F0877116011CCDECE2501A50B40C40418377037E16D0282B2B5E347138",
        		Hex.toHexString(notInChainMessage.getHash()).toUpperCase());
    }

    @Test /* BlocksMessage POC-5 real msg*/
    public void test12(){

        String blocksRaw = "F8D813F8D5F8D1A0085F6A51A63D1FBA43D6E5FE166A47BED64A8B93A99012537D50F3279D4CEA52A01DCC4DE8DEC75D7AAB85B567B6CCD41AD312451B948A7413F0A142FD40D4934794D8758B101609A9F2A881A017BA86CBE6B7F0581DA068472689EA736CFC6B18FCAE9BA7454BADF9C65333A0317DFEFAE1D4AFFF6F90A000000000000000000000000000000000000000000000000000000000000000008401EDF1A18222778609184E72A0008080845373B0B180A0000000000000000000000000000000000000000000000000D1C0D8BC6D744943C0C0";

        byte[] payload = Hex.decode(blocksRaw);
        RLPList rlpList = RLP.decode2(payload);

        BlocksMessage blocksMessage = new BlocksMessage(rlpList);
        List<Block> list = blocksMessage.getBlockDataList();
        System.out.println(blocksMessage);

        Block block = list.get(0);
    }

    @Test /* BlocksMessage POC-5 real big msg*/
    public void test13(){

        String blocksRaw

        byte[] payload = Hex.decode(blocksRaw);
        RLPList rlpList = RLP.decode2(payload);

        BlocksMessage blocksMessage = new BlocksMessage(rlpList);
        List<Block> list = blocksMessage.getBlockDataList();
        System.out.println(blocksMessage);

        Block block = list.get(0);
    }

    @Test /* GetChain encode */
    public void test14(){

       String expected = "F86514A0B4986B41E57B351FD037775A4D439443B4BDE859D061D772117AFA855BFDE18EA0241A2A72372AD63C40704C93CD380A51FEE174EB59501D731A009F51372E5205A0E963653D860F35E27A5572CFEECE1BB518C42BB97DEAC0978FA788F6DCB45CF764";

       String hash1 =  "B4986B41E57B351FD037775A4D439443B4BDE859D061D772117AFA855BFDE18E";
       String hash2 =  "241A2A72372AD63C40704C93CD380A51FEE174EB59501D731A009F51372E5205";
       String hash3 =  "E963653D860F35E27A5572CFEECE1BB518C42BB97DEAC0978FA788F6DCB45CF7";

       GetChainMessage getChainMessage =
            new GetChainMessage((byte)100, Hex.decode(hash1),    Hex.decode(hash2), Hex.decode(hash3));

        assertEquals(expected, Hex.toHexString(getChainMessage.getPayload()).toUpperCase());

        byte[] size = ByteUtil.calcPacketLength( getChainMessage.getPayload());

        assertEquals("00000067", Hex.toHexString(size));
    }

    @Test /* Transactions msg encode */
    public void test15() throws Exception {

        String expected = "f87312f870808b00d3c21bcecceda10000009479b08ad8787060333663d19704909ee7b1903e588609184e72a000824255801ca00f410a70e42b2c9854a8421d32c87c370a2b9fff0a27f9f031bb4443681d73b5a018a7dc4c4f9dee9f3dc35cb96ca15859aa27e219a8e4a8547be6bd3206979858";

        BigInteger value = new BigInteger("1000000000000000000000000");

        byte[] privKey = HashUtil.sha3("cat".getBytes());
        ECKey ecKey = ECKey.fromPrivate(privKey);

        byte[] gasPrice=  Hex.decode("09184e72a000");
        byte[] gas =      Hex.decode("4255");

        Transaction tx = new Transaction(null, value.toByteArray(),
                ecKey.getAddress(),  gasPrice, gas, null);

        tx.sign(privKey);
        tx.getEncoded();

        List<Transaction> txList =  new ArrayList<Transaction>();
        txList.add(tx);
        TransactionsMessage transactionsMessage = new TransactionsMessage(txList);

        assertEquals(expected, Hex.toHexString( transactionsMessage.getPayload()) );

    }
}

