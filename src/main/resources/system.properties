# if the system will work as a server also
# accept for incoming connections [true/false]
server.acceptConnections = false

# one default access point to start
# discover the network e.g. ip: [54.201.28.117] port: [30303]
peer.discovery.ip = 54.201.28.117
peer.discovery.port = 30303

# Peer Server Zero: peer discovery
#peer.discovery.ip = 54.201.28.117
#peer.discovery.port = 30303
                    	
# Peer Server One: peer discovery
#peer.discovery.ip = 54.204.10.41
#peer.discovery.port = 30303
                    	
# Some dude in Canada
#peer.discovery.ip = 131.104.247.135
#peer.discovery.port = 30303
                    	
# Nick
#peer.discovery.ip = 82.217.72.169 
#peer.discovery.port = 30303
                    	
# ZeroGox
#peer.discovery.ip = 54.204.10.41
#peer.discovery.port = 30303
                    	
# RomanJ
# peer.discovery.ip = 54.211.14.10
# peer.discovery.port = 40404


# active peer ip and port
# that is the peer through
# we get the chain: [54.201.28.117] port: [30303]
peer.active.ip = 151.64.223.120
peer.active.port = 30304


# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
# if peer discovery is off
# the peer window will show
# only what retrieved by active
# peer [true/false]
peer.discovery = true

# number of workers that
# tastes the peers for being
# online [1..10]
peer.discovery.workers = 5

# connection timeout for trying to
# connect to a peer [seconds]
peer.discovery.timeout = 2

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 5

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

# everytime the application starts
# the existing database will be 
# destroyed and all the data will be 
# downloaded from peers again
database.reset = true
